---
- name: "Create AWS instance"
  hosts: 127.0.0.1
  connection: local
  gather_facts: False
  remote_user: ubuntu
  vars:
    vpc_id: vpc-88e89aec
    project_name: "insight-ebs-migrate"
    # env name, this will be used as an inventory file name
    env: "staging"
    # remote user
    app_code_user: "centos"

    aws_region: us-east-1 # AWS region, where instance will be created
    instance_type: t2.micro  # AWS instance type
    # Centos 6.5 w. updates / HVM / US-East
    ami: ami-1c221e76
  roles:
    - ec2-create

- name: Add user keys
  hosts: ec2_hosts
  sudo: yes
  sudo_user: root
  remote_user: ubuntu
  vars:
    app_code_user: "centos"
  roles:
    - ec2-users

#- name: Create a migrator machine instance
  #ec2:
    #key_name: mykey
    #group: migrators
    #instance_type: {{ t2.micro }}
    #image: {{ migrator_image_id }}
    #wait: yes
    #wait_timeout: 500
    #volumes:
      #- device_name: /dev/sdb
        #snapshot: snap-abcdef12
        #volume_type: io1
        #iops: 1000
        #volume_size: 100
        #delete_on_termination: true
    #monitoring: yes
    ##vpc_subnet_id: subnet-29e63245
    #assign_public_ip: yes


# Do the baseline setup of migration tools
#- name: update packages
  #yum: pkg=* state=latest

#- name: install xfsprogs
  #yum: pkg=xfsprogs state=latest

#- name: format new volume
  #filesystem: fstype=xfs dev={{ mount_dev }}

#- name: edit fstab and mount the vol
  #mount: name={{ mount_dir }} src={{ mount_dev }} fstype=xfs state=mounted opts="rw,noatime,inode64,allocsize=16m"


#- name: Detach old volume from instance
#- name: Attach the old volume to migrator
#- name: Attach a new volume to migrator
#- name: Rsync between the volumes
#- name: Unmount the new volume from migrator
#- name: Unmount the old volume from migrator
#- name: Re-attach new volume to instance

#- name: Attach the old volume
  
#- name: Create / adjust the insight users
  #user: name=insight comment="Palette Insight User" state=present shell=/bin/bash home=/home/insight


#- name: Add GreenPlum-required boot flags to the kernel (elevator=deadline transparent_hugepage=never)
  #grubconf: flag={{ item_foo.name }} value={{ item_foo.value }}
  #with_items:
    #- { name: elevator, value: deadline }
    #- { name: transparent_hugepage, value: never }
  #loop_control:
    #loop_var: gp_boot_flag


